---------------------------------------------------------------ROW_NUMBER------------------------------------------------------------------------------

CREATE DATABASE Airlines;
USE DATABASE Airlines;

CREATE or replace TABLE DM_Airlines 
                       ( ID INT ,
                         NAME VARCHAR (90) );             
                         
INSERT INTO DM_Airlines VALUES (1, 'UNITED AIRLINES'),
(2, 'AIR INDIA'),(2, 'AIR INDIA'),
(3, 'INDIGO'),
(4, 'VISTARA'),(4, 'VISTARA'),
(5, 'SPICE JET'),
(7, 'GO AIR'),(7, 'GO AIR'),
(8, 'AKASHA AIR'),
(9,'BRITISH AIRWAYS');

select * from DM_Airlines;

select *, row_number() over( order by name) as R_num
from DM_Airlines;

delete from 
( select *, row_number() over( order by name) as R_num
from DM_Airlines ) as test where R_num = 2,5,10 ;


CREATE DATABASE DM_WINDOW_FUNCTIONS;
USE DATABASE DM_WINDOW_FUNCTIONS;

DROP DATABASE AJ_WINDOW_FUNCTIONS;

CREATE  TABLE DM_EMPLOYEE_RAW
(
Employee_ID INT,
Name Varchar(20),
Salary float(2)
);

INSERT INTO DM_EMPLOYEE_RAW (EMPLOYEE_ID,NAME,SALARY) VALUES (100,'JENIFER',4400);
INSERT INTO DM_EMPLOYEE_RAW (EMPLOYEE_ID,NAME,SALARY) VALUES (100,'JENIFER',4400);
INSERT INTO DM_EMPLOYEE_RAW (EMPLOYEE_ID,NAME,SALARY) VALUES (101,'Michael',13000);
INSERT INTO DM_EMPLOYEE_RAW (EMPLOYEE_ID,NAME,SALARY) VALUES (101,'Michael',13000);
INSERT INTO DM_EMPLOYEE_RAW (EMPLOYEE_ID,NAME,SALARY) VALUES (102,'Pat',6000);
INSERT INTO DM_EMPLOYEE_RAW (EMPLOYEE_ID,NAME,SALARY) VALUES (102,'Pat',6000);
INSERT INTO DM_EMPLOYEE_RAW (EMPLOYEE_ID,NAME,SALARY) VALUES (103,'Den',11000);

SELECT * FROM DM_EMPLOYEE_RAW;

select *, row_number() over( order by name) as R_num
from DM_EMPLOYEE_RAW;

------------------------------------------------------RANK/ DENSE_RANK FUNCTION------------------------------------------------------------------------

USE DATABASE DEMO_DATABASE;

CREATE OR REPLACE TABLE EMPLOYEE
(
   EMPID INTEGER NOT NULL PRIMARY KEY,
   EMP_NAME VARCHAR2(20),
   JOB_ROLE STRING,
   SALARY NUMBER(10,2)
);

INSERT INTO EMPLOYEE
VALUES('101','ANAND JHA','Analyst',50000);

INSERT INTO EMPLOYEE
VALUES('101','ANAND JHA','Analyst',50000);

INSERT INTO EMPLOYEE
VALUES('101','ANAND JHA','Analyst',50000);

INSERT INTO EMPLOYEE
VALUES(102,'ALex', 'Data Enginner',60000);

INSERT INTO EMPLOYEE
VALUES(103,'Ravi', 'Data Scientist',48000);

INSERT INTO EMPLOYEE
VALUES(103,'Ravi', 'Data Scientist',48000);

INSERT INTO EMPLOYEE
VALUES(104,'Peter', 'Analyst',98000);

INSERT INTO EMPLOYEE
VALUES(105,'Pulkit', 'Data Scientist',72000);

INSERT INTO EMPLOYEE
VALUES(106,'Robert','Analyst',100000);

INSERT INTO EMPLOYEE
VALUES(107,'Rishabh','Data Engineer',67000);

INSERT INTO EMPLOYEE
VALUES(108,'Subhash','Manager',148000);

INSERT INTO EMPLOYEE
VALUES(109,'Michaeal','Manager',213000);

INSERT INTO EMPLOYEE
VALUES(110,'Dhruv','Data Scientist',89000);

INSERT INTO EMPLOYEE
VALUES(110,'Dhruv','Data Scientist',89000);

INSERT INTO EMPLOYEE
VALUES(111,'Amit Sharma','Analyst',72000);

DELETE FROM EMPLOYEE WHERE EMPID = 110;

SELECT * FROM EMPLOYEE;

SELECT *, 
    min(salary) over(partition by JOB_ROLE ORDER BY SALARY DESC) as MIN_SAL,
    max(salary) over(partition by JOB_ROLE ORDER BY SALARY DESC) as MAX_SAL ,
    SUM(salary) over(partition by JOB_ROLE) as TOT_SAL_JOB_WISE,
    SUM(salary) over() as TOT_SAL,
    ROW_NUMBER() OVER(PARTITION BY JOB_ROLE ORDER BY SALARY DESC) AS SAL_ROW_PARTITION,
    ROW_NUMBER() OVER(ORDER BY SALARY DESC) AS SAL_ROW_WITHOUT_PARTITION,
    RANK() OVER(PARTITION BY JOB_ROLE ORDER BY SALARY DESC) AS SAL_ROW_RANK,
    DENSE_RANK() OVER(PARTITION BY JOB_ROLE ORDER BY SALARY DESC) AS SAL_ROW_DENSE_RANK
FROM EMPLOYEE;

--- RANK FUNCTION()
SELECT *, RANK() OVER(PARTITION BY JOB_ROLE ORDER BY SALARY DESC) AS SAL_ROW
FROM EMPLOYEE;

--- DENSE_RANK FUNCTION()
SELECT *, DENSE_RANK() OVER(PARTITION BY JOB_ROLE ORDER BY SALARY DESC) AS SAL_ROW
FROM EMPLOYEE;

-- display total salary along with all the records ()every row value 
SELECT * , SUM(SALARY) OVER() AS TOT_SALARY
FROM EMPLOYEE;

SELECT * , SUM(SALARY) OVER(PARTITION BY JOB_ROLE DESC) AS TOT_SALARY
FROM EMPLOYEE;

-- display the total salary per job category for all the rows 
SELECT *,MAX(SALARY) OVER(PARTITION BY JOB_ROLE) AS MAX_JOB_SAL
FROM EMPLOYEE;

select *,max(salary) over(partition by JOB_ROLE) as MAX_SAL , 
min(salary) over(partition by JOB_ROLE) as MIN_SAL,
SUM(salary) over(partition by JOB_ROLE) as TOT_SAL
from Employee;



--ARRANGING ROWS WITHIN EACH PARTITION BASED ON SALARY IN DESC ORDDER
select *,max(salary) over(partition by JOB_ROLE ORDER BY SALARY DESC) as MAX_SAL , 
min(salary) over(partition by JOB_ROLE ORDER BY SALARY DESC) as MIN_SAL,
SUM(salary) over(partition by JOB_ROLE ORDER BY SALARY DESC) as TOT_SAL
from Employee;

-- ROW_NUMBER() It assigns a unique sequential number to each row of the table ...
SELECT * FROM 
(
SELECT *,ROW_NUMBER() OVER(PARTITION BY JOB_ROLE ORDER BY SALARY DESC) AS PART_ROW_NUM 
FROM EMPLOYEE 
)
WHERE PART_ROW_NUM <=2;

/* The RANK() window function, as the name suggests, ranks the rows within their partition based on the given condition.
   In the case of ROW_NUMBER(), we have a sequential number. 
   On the other hand, in the case of RANK(), we have the same rank for rows with the same value.
But there is a problem here. Although rows with the same value are assigned the same rank, the subsequent rank skips the missing rank. 
This wouldn’t give us the desired results if we had to return “top N distinct” values from a table. 
Therefore we have a different function to resolve this issue. */

SELECT *,ROW_NUMBER() OVER(PARTITION BY JOB_ROLE ORDER BY SALARY DESC) AS ROW_NUM ,
RANK() OVER(PARTITION BY JOB_ROLE ORDER BY SALARY DESC) AS RANK_ROW
FROM EMPLOYEE;

/* The DENSE_RANK() function is similar to the RANK() except for one difference, it doesn’t skip any ranks when ranking rows
Here, all the ranks are distinct and sequentially increasing within each partition. 
As compared to the RANK() function, it has not skipped any rank within a partition. */

SELECT * FROM 
(
SELECT *,ROW_NUMBER() OVER(PARTITION BY JOB_ROLE ORDER BY SALARY) AS ROW_NUM ,
RANK() OVER(PARTITION BY JOB_ROLE ORDER BY SALARY) AS RANK_ROW,
DENSE_RANK() OVER(PARTITION BY JOB_ROLE ORDER BY SALARY) AS DENSE_RANK_ROW 
FROM EMPLOYEE  
)
WHERE DENSE_RANK_ROW <=2;

----------------------------------------------------------LEAD FUNCTION/LAG FUNCTION-------------------------------------------------------------------

CREATE OR REPLACE TABLE SALES
                  ( PRODUCT_ID INT,
                    SALE_DATE DATE,
                    DAILY_SALES NUMBER(10,2));

INSERT INTO SALES VALUES 
(100, '2000-09-28', 48850.40),
(100, '2000-09-29', 54500.22),
(100, '2000-09-30', 36000.07),
(100, '2000-10-01', 40200.43),
(200, '2000-09-28', 41888.88),
(200, '2000-09-29', 48000.00),
(200, '2000-09-30', 49850.03),
(200, '2000-10-01', 54850.29),
(300, '2000-09-28', 61301.77),
(300, '2000-09-29', 34509.13),
(300, '2000-09-30', 43868.86),
(300, '2000-10-01', 28000.00);

SELECT * FROM SALES;

SELECT PRODUCT_ID AS PROD, SALE_DATE AS DATE, DAILY_SALES AS SALES,
LEAD(SALES,1) OVER(PARTITION BY PROD ORDER BY DATE) AS NEXT_VALUE,
LEAD(SALES,2) OVER(PARTITION BY PROD ORDER BY DATE) AS SECOND_VALUE,
ROUND((NEXT_VALUE - SALES)/SALES * 100,2) AS SALE_CHANGE_NEXT_DAY,
ROUND((SECOND_VALUE - SALES)/SALES * 100,2) AS SALE_CHANGE_SECOND_VALUE
FROM SALES
QUALIFY SECOND_VALUE IS NOT NULL;

-- As we use where clause to filter the coumn in Select statement and having clause in Group by same way we use Qualify in window function named Lead function to filter the records--

-- LEAD(DAILY_SALES, -1) = LAG(DAILY_SALES, 1)-- LAG IS KNOW AS ONE POSITION BEHIND IN LEAD (LAG IS JUST REVERSE TO LEAD)

SELECT * FROM SALES;

SELECT PRODUCT_ID AS PROD, SALE_DATE AS DATE, DAILY_SALES AS TODAY_SALES,
LAG(TODAY_SALES,1) OVER(PARTITION BY PROD ORDER BY DATE) AS PREV_VALUE,
LAG(TODAY_SALES,2) OVER(PARTITION BY PROD ORDER BY DATE) AS PREV_TO_PREV_VALUE,
ROUND((PREV_VALUE - TODAY_SALES)/TODAY_SALES * 100,2) AS SALE_CHANGE_PREV_DAY,
ROUND((PREV_TO_PREV_VALUE - TODAY_SALES)/TODAY_SALES * 100,2) AS SALE_CHANGE_PREV_TO_PREV_VALUE
FROM SALES;
--QUALIFY SECOND_VALUE IS NOT NULL; (DOESN'T WORK IN LAG FUNCTION)

--------------------------------------------------------FIRST VALUE/LAST VALUE/NTH VALUE---------------------------------------------------------------
--THESE FUNCTION IS USE TO COMPARE THE FLUCTUATE VALUE

SELECT
        column1,
        column2,
        FIRST_VALUE(column2) OVER (PARTITION BY column1 ORDER BY column2 NULLS LAST) AS column2_first
    FROM VALUES
       (1, 10), (1, 11), (1, null), (1, 12),
       (2, 20), (2, 21), (2, 22)
    ORDER BY column1, column2;


SELECT
        column1,
        column2,
        LAST_VALUE(column2)IGNORE NULLS OVER (PARTITION BY column1 ORDER BY column2 NULLS LAST) AS column2_first
    FROM VALUES
       (1, 10), (1, 11), (1, null), (1, 12),
       (2, 20), (2, 21), (2, 22)
    ORDER BY column1, column2;

SELECT
        column1,
        column2,
        NTH_VALUE(column2, 2) OVER (PARTITION BY column1 ORDER BY column2 NULLS LAST) AS column2_first
    FROM VALUES
       (1, 10), (1, 11), (1, null), (1, 12),
       (2, 20), (2, 21), (2, 22)
    ORDER BY column1, column2;


SELECT
        column1,
        column2,
        FIRST_VALUE(column2) OVER (PARTITION BY column1 ORDER BY column2 NULLS LAST) AS column2_first,
        FIRST_VALUE(column2)IGNORE NULLS OVER (PARTITION BY column1 ORDER BY column2 NULLS LAST) AS column2_first_WITHOUT_NULL,
        LAST_VALUE(column2) OVER (PARTITION BY column1 ORDER BY column2 NULLS LAST) AS column2_first,
        LAST_VALUE(column2)IGNORE NULLS OVER (PARTITION BY column1 ORDER BY column2 NULLS LAST) AS column2_first_WITHOUT_NULL
    FROM VALUES
       (1, 10), (1, 11), (1, null), (1, 12),
       (2, 20), (2, 21), (2, 22)
    ORDER BY column1, column2;

